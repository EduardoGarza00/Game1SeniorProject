;
; File generated by cc65 v 2.19 - Git c48e821
;
	.fopt		compiler,"cc65 v 2.19 - Git c48e821"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_bank_spr
	.import		_vram_adr
	.import		_vram_unrle
	.import		_memcpy
	.import		_clear_vram_buffer
	.import		_set_scroll_x
	.import		_set_scroll_y
	.import		_get_ppu_addr
	.import		_set_data_pointer
	.import		_set_mt_pointer
	.import		_buffer_4_mt
	.import		_flush_vram_update_nmi
	.export		_runlb
	.export		_runmid
	.export		_runrf
	.export		_metatiles1
	.export		_ball1
	.export		_ball2
	.export		_ball3
	.export		_ball4
	.export		_Room1
	.export		_Room2
	.export		_map_loaded
	.export		_level
	.export		_address
	.export		_map
	.export		_room
	.export		_direction
	.export		_x
	.export		_prevx
	.export		_y
	.export		_pad1
	.export		_i
	.export		_j
	.export		_k
	.export		_collision
	.export		_collision_L
	.export		_collision_R
	.export		_collision_U
	.export		_collision_D
	.export		_coordinates
	.export		_temp_x
	.export		_temp_y
	.export		_temp1
	.export		_temp2
	.export		_temp3
	.export		_temp4
	.export		_L_R_switch
	.export		_old_x
	.export		_temp5
	.export		_temp6
	.export		_temp7
	.export		_temp8
	.export		_eject_L
	.export		_eject_R
	.export		_eject_D
	.export		_eject_U
	.export		_index
	.export		_scroll_x
	.export		_scroll_y
	.export		_scroll_count
	.export		_pseudo_scroll_x
	.export		_nt
	.export		_offset
	.export		_c_map
	.export		_c_map2
	.export		_bodies
	.export		_Rooms
	.export		_brotate
	.export		_Level_offsets
	.export		_sball
	.export		_Generic
	.export		_Generic2
	.export		_palette_sp
	.export		_is_solid
	.export		_draw_sprites
	.export		_load_room
	.export		_movement
	.export		_draw_screen_R
	.export		_palette
	.export		_main

.segment	"DATA"

_sball:
	.word	$0014
	.word	$0014
	.res	4,$00

.segment	"RODATA"

_runlb:
	.byte	$F8
	.byte	$F8
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$F8
	.byte	$09
	.byte	$00
	.byte	$F8
	.byte	$00
	.byte	$18
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$19
	.byte	$00
	.byte	$80
_runmid:
	.byte	$F8
	.byte	$F8
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$F8
	.byte	$09
	.byte	$00
	.byte	$F8
	.byte	$00
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0B
	.byte	$00
	.byte	$80
_runrf:
	.byte	$F8
	.byte	$F8
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$F8
	.byte	$09
	.byte	$00
	.byte	$F8
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$80
_metatiles1:
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$02
	.byte	$05
	.byte	$06
	.byte	$08
	.byte	$07
	.byte	$01
	.byte	$05
	.byte	$06
	.byte	$08
	.byte	$07
	.byte	$00
_ball1:
	.byte	$F1
	.byte	$F4
	.byte	$10
	.byte	$00
	.byte	$80
_ball2:
	.byte	$F1
	.byte	$F4
	.byte	$11
	.byte	$00
	.byte	$80
_ball3:
	.byte	$F1
	.byte	$F4
	.byte	$12
	.byte	$00
	.byte	$80
_ball4:
	.byte	$F1
	.byte	$F4
	.byte	$13
	.byte	$00
	.byte	$80
_Room1:
	.byte	$04
	.byte	$02
	.byte	$04
	.byte	$23
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$14
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$07
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$12
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$07
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$14
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$07
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$12
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$07
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$14
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$08
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$14
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$1E
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$1D
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$02
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$05
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$12
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$FE
	.byte	$01
	.byte	$04
	.byte	$0A
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$09
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$0D
	.byte	$02
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$06
	.byte	$01
	.byte	$04
	.byte	$06
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$13
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$14
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$18
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$0B
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$10
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$09
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$0A
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$0F
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$0A
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$11
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$0B
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$11
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$24
	.byte	$00
	.byte	$04
	.byte	$3E
	.byte	$00
	.byte	$04
	.byte	$00
_Room2:
	.byte	$04
	.byte	$02
	.byte	$04
	.byte	$23
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$07
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$09
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$07
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$06
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$08
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$07
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$08
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$0A
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$07
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$06
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$08
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$07
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$07
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$09
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$08
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$08
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$0A
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$43
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$06
	.byte	$02
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$05
	.byte	$02
	.byte	$04
	.byte	$07
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$07
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$0A
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$FD
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$19
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$0D
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$06
	.byte	$01
	.byte	$04
	.byte	$06
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$13
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$14
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$1D
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$12
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$07
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$11
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$08
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$12
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$07
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$12
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$09
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$13
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$09
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$24
	.byte	$00
	.byte	$04
	.byte	$3E
	.byte	$00
	.byte	$04
	.byte	$00
_bodies:
	.addr	_runlb
	.addr	_runmid
	.addr	_runrf
_Rooms:
	.addr	_Room1
	.addr	_Room2
_brotate:
	.addr	_ball1
	.addr	_ball2
	.addr	_ball3
	.addr	_ball4
_Level_offsets:
	.byte	$00
	.byte	$01
_palette_sp:
	.byte	$0F
	.byte	$2C
	.byte	$0C
	.byte	$31
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_is_solid:
	.byte	$00
	.byte	$80
	.byte	$C0
	.byte	$80
	.byte	$80
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_palette:
	.byte	$09
	.byte	$31
	.byte	$30
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00

.segment	"BSS"

_map_loaded:
	.res	1,$00
_level:
	.res	1,$00
_address:
	.res	2,$00
_map:
	.res	1,$00
_room:
	.res	1,$00
_direction:
	.res	1,$00
_x:
	.res	1,$00
_prevx:
	.res	1,$00
_y:
	.res	1,$00
_pad1:
	.res	1,$00
_i:
	.res	1,$00
_j:
	.res	1,$00
_k:
	.res	1,$00
_collision:
	.res	1,$00
_collision_L:
	.res	1,$00
_collision_R:
	.res	1,$00
_collision_U:
	.res	1,$00
_collision_D:
	.res	1,$00
_coordinates:
	.res	1,$00
_temp_x:
	.res	1,$00
_temp_y:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_L_R_switch:
	.res	1,$00
_old_x:
	.res	1,$00
_temp5:
	.res	2,$00
_temp6:
	.res	2,$00
_temp7:
	.res	2,$00
_temp8:
	.res	2,$00
_eject_L:
	.res	1,$00
_eject_R:
	.res	1,$00
_eject_D:
	.res	1,$00
_eject_U:
	.res	1,$00
_index:
	.res	1,$00
_scroll_x:
	.res	2,$00
_scroll_y:
	.res	2,$00
_scroll_count:
	.res	1,$00
_pseudo_scroll_x:
	.res	2,$00
_nt:
	.res	1,$00
_offset:
	.res	1,$00
_c_map:
	.res	240,$00
_c_map2:
	.res	240,$00
_Generic:
	.res	4,$00
_Generic2:
	.res	4,$00

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; temp_x = high_byte(sball.x);
;
	lda     _sball+1
	sta     _temp_x
;
; temp_y = high_byte(sball.y);
;
	lda     _sball+3
	sta     _temp_y
;
; oam_meta_spr(temp_x,temp_y,brotate[k]); 
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	ldx     #$00
	lda     _k
	asl     a
	bcc     L0003
	inx
	clc
L0003:	adc     #<(_brotate)
	sta     ptr1
	txa
	adc     #>(_brotate)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ load_room (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_room: near

.segment	"CODE"

;
; offset = 0;
;
	lda     #$00
	sta     _offset
;
; set_data_pointer(Rooms[offset]);
;
	tax
	lda     _offset
	asl     a
	bcc     L0018
	inx
	clc
L0018:	adc     #<(_Rooms)
	sta     ptr1
	txa
	adc     #>(_Rooms)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _set_data_pointer
;
; set_mt_pointer(metatiles1);
;
	lda     #<(_metatiles1)
	ldx     #>(_metatiles1)
	jsr     _set_mt_pointer
;
; for(y=0; ;y+=0x20){ 
;
	lda     #$00
L0016:	sta     _y
;
; for(x=0; ;x+=0x20){
;
	lda     #$00
L0015:	sta     _x
;
; clear_vram_buffer(); // do each frame, and before putting anything in the buffer
;
	jsr     _clear_vram_buffer
;
; address = get_ppu_addr(0, x, y);
;
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + (x >> 4);
;
	lda     _y
	and     #$F0
	sta     ptr1
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update_nmi();
;
	jsr     _flush_vram_update_nmi
;
; if (x == 0xe0) break;
;
	lda     _x
	cmp     #$E0
	beq     L001B
;
; for(x=0; ;x+=0x20){
;
	lda     #$20
	clc
	adc     _x
	jmp     L0015
;
; if (y == 0xe0) break;
;
L001B:	lda     _y
	cmp     #$E0
	beq     L001C
;
; for(y=0; ;y+=0x20){ 
;
	lda     #$20
	clc
	adc     _y
	jmp     L0016
;
; ++offset;
;
L001C:	inc     _offset
;
; set_data_pointer(Rooms[offset]);
;
	ldx     #$00
	lda     _offset
	asl     a
	bcc     L0019
	inx
	clc
L0019:	adc     #<(_Rooms)
	sta     ptr1
	txa
	adc     #>(_Rooms)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _set_data_pointer
;
; for(y=0; ;y+=0x20){ 
;
	lda     #$00
L0017:	sta     _y
;
; x = 0;
;
	lda     #$00
	sta     _x
;
; clear_vram_buffer(); // do each frame, and before putting anything in the buffer
;
	jsr     _clear_vram_buffer
;
; address = get_ppu_addr(1, x, y);
;
	jsr     decsp2
	lda     #$01
	tay
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0);
;
	lda     _y
	and     #$F0
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update_nmi();
;
	jsr     _flush_vram_update_nmi
;
; if (y == 0xe0) break;
;
	lda     _y
	cmp     #$E0
	beq     L000D
;
; for(y=0; ;y+=0x20){ 
;
	lda     #$20
	clc
	adc     _y
	jmp     L0017
;
; clear_vram_buffer();
;
L000D:	jsr     _clear_vram_buffer
;
; --offset;
;
	dec     _offset
;
; memcpy (c_map, Rooms[offset], 240);
;
	lda     #<(_c_map)
	ldx     #>(_c_map)
	jsr     pushax
	ldx     #$00
	lda     _offset
	asl     a
	bcc     L001A
	inx
	clc
L001A:	adc     #<(_Rooms)
	sta     ptr1
	txa
	adc     #>(_Rooms)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jsr     _memcpy
;
; sball.x = 0x4000;
;
	ldx     #$40
	lda     #$00
	sta     _sball
	stx     _sball+1
;
; sball.y = 0xc400;
;
	ldx     #$C4
	sta     _sball+2
	stx     _sball+2+1
;
; sball.vel_x = 0;
;
	sta     _sball+4
	sta     _sball+4+1
;
; sball.vel_y = 0;
;
	sta     _sball+6
	sta     _sball+6+1
;
; map_loaded = 0;
;
	sta     _map_loaded
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movement: near

.segment	"CODE"

;
; old_x = sball.x;
;
	lda     _sball
	sta     _old_x
;
; if(pad1 & PAD_LEFT) {
;
	lda     _pad1
	and     #$02
	beq     L0014
;
; sball.vel_x -= ACCEL;
;
	lda     _sball+4
	sec
	sbc     #$30
	sta     _sball+4
	bcs     L0003
	dec     _sball+4+1
;
; sball.x -=1;
;
L0003:	lda     _sball
	sec
	sbc     #$01
	sta     _sball
	bcs     L0004
	dec     _sball+1
;
; i++;
;
L0004:	inc     _i
;
; scroll_x-=1;
;
	lda     _scroll_x
	sec
	sbc     #$01
	sta     _scroll_x
	bcs     L0014
	dec     _scroll_x+1
;
; if (pad1 & PAD_RIGHT){
;
L0014:	lda     _pad1
	and     #$01
	beq     L0016
;
; sball.vel_x += ACCEL;
;
	lda     #$30
	clc
	adc     _sball+4
	sta     _sball+4
	bcc     L0007
	inc     _sball+4+1
;
; sball.x +=1;
;
L0007:	inc     _sball
	bne     L0008
	inc     _sball+1
;
; i++;
;
L0008:	inc     _i
;
; scroll_x+=1;
;
	inc     _scroll_x
	bne     L0009
	inc     _scroll_x+1
;
; if (k != 3 & i%7 ==0){
;
L0009:	lda     _k
	cmp     #$03
	jsr     boolne
	jsr     pusha0
	lda     _i
	jsr     pusha0
	lda     #$07
	jsr     tosumoda0
	cpx     #$00
	bne     L000B
	cmp     #$00
L000B:	jsr     booleq
	jsr     tosanda0
	cmp     #$00
	beq     L0015
;
; k++;
;
	inc     _k
;
; else if(k==3){
;
	jmp     L0016
L0015:	lda     _k
	cmp     #$03
	bne     L0016
;
; k=0;}
;
	lda     #$00
	sta     _k
;
; if(pad1 & PAD_UP){
;
L0016:	lda     _pad1
	and     #$08
	beq     L0017
;
; sball.y -=1;
;
	lda     _sball+2
	sec
	sbc     #$01
	sta     _sball+2
	bcs     L0011
	dec     _sball+2+1
;
; else if (pad1 & PAD_DOWN){
;
	rts
L0017:	lda     _pad1
	and     #$04
	beq     L0011
;
; sball.y +=1;
;
	inc     _sball+2
	bne     L0011
	inc     _sball+2+1
;
; } 
;
L0011:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_screen_R (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_screen_R: near

.segment	"CODE"

;
; pseudo_scroll_x = scroll_x;
;
	lda     _scroll_x+1
	sta     _pseudo_scroll_x+1
	lda     _scroll_x
	sta     _pseudo_scroll_x
;
; temp1 = 1 ;
;
	lda     #$01
	sta     _temp1
;
; set_data_pointer(Rooms[temp1]);
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L0011
	inx
	clc
L0011:	adc     #<(_Rooms)
	sta     ptr1
	txa
	adc     #>(_Rooms)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _set_data_pointer
;
; nt = temp1 & 1;
;
	lda     _temp1
	and     #$01
	sta     _nt
;
; x = pseudo_scroll_x & 0xff;
;
	lda     _pseudo_scroll_x
	sta     _x
;
; switch(scroll_count){
;
	lda     _scroll_count
;
; }
;
	beq     L0004
	cmp     #$01
	beq     L0006
	cmp     #$02
	jeq     L0009
	jmp     L000C
;
; address = get_ppu_addr(nt, x, 0);
;
L0004:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	tya
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0x20);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$20
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x20 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$20
;
; break;
;
	jmp     L0016
;
; address = get_ppu_addr(nt, x, 0x40);
;
L0006:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$40
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x40 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$40
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0x60);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$60
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x60 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$60
;
; break;
;
	jmp     L0016
;
; address = get_ppu_addr(nt, x, 0x80);
;
L0009:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$80
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x80 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$80
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0xa0);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$A0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xa0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$A0
;
; break;
;
	jmp     L0016
;
; address = get_ppu_addr(nt, x, 0xc0);
;
L000C:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$C0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xc0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$C0
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0xe0);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$E0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xe0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$E0
L0016:	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; ++scroll_count;
;
	inc     _scroll_count
;
; scroll_count &= 3; //mask off top bits, keep it 0-3
;
	lda     _scroll_count
	and     #$03
	sta     _scroll_count
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); 
;
	jsr     _ppu_off
;
; pal_bg(palette);
;
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(Room1);
;
	lda     #<(_Room1)
	ldx     #>(_Room1)
	jsr     _vram_unrle
;
; vram_adr(NAMETABLE_B);
;
	ldx     #$24
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(Room2);
;
	lda     #<(_Room2)
	ldx     #>(_Room2)
	jsr     _vram_unrle
;
; sball.x = 0x4000;
;
	ldx     #$40
	lda     #$00
	sta     _sball
	stx     _sball+1
;
; sball.y = 0x7500;
;
	ldx     #$75
	sta     _sball+2
	stx     _sball+2+1
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
L0002:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; clear_vram_buffer(); // do at the beginning of each frame
;
	jsr     _clear_vram_buffer
;
; movement();
;
	jsr     _movement
;
; set_scroll_x(scroll_x);
;
	lda     _scroll_x
	ldx     _scroll_x+1
	jsr     _set_scroll_x
;
; set_scroll_y(scroll_y);
;
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _set_scroll_y
;
; draw_screen_R();
;
	jsr     _draw_screen_R
;
; draw_sprites();
;
	jsr     _draw_sprites
;
; while (1){
;
	jmp     L0002

.endproc

